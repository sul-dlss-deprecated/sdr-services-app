
%html
  %head
    %meta{name: "viewport", content: "width=device-width, initial-scale=1.0"}

    %link{href: "http://twitter.github.com/bootstrap/assets/js/google-code-prettify/prettify.css", rel: "stylesheet", media: "screen"}
    %link{href: "//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css", rel: "stylesheet", media: "screen"}
    %link{href: "//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css", rel: "stylesheet", media: "screen"}

    :css
      body {
        margin: 3em;
      }
      table, th, td {
        vertical-align: top;
      }
      td, th { padding: 5px; }
      th {
        text-align: left;
        font-weight: bold;
      }
      h2 { margin-top: 1em; }
      .collection_link {
        font-size: larger;
        padding: 0 0 .5em;
      }
      .resource {
        margin: 0 2em 2.5em 3em;
      }
      .helper {
        cursor: help;
        vertical-align: -7%;
      }
      @media (max-width: 767px) {
        .bs-docs-sidenav {
          width: auto;
          margin-bottom: 20px;
        }
        .bs-docs-sidenav.affix {
          position: static;
          width: auto;
          top: 0;
        }
      }

  %body

    %script{src: "https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"}
    %script{src: "//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"}

    %script{src: "http://twitter.github.com/bootstrap/assets/js/google-code-prettify/prettify.js"}

    %div.container
      %div.row
        %div.col-sm-2.sidebar-module

          %ul.nav.nav-list.bs-docs-sidenav.affix.sidebar-nav
            %li
              %a{href: "#nav_home"} Home
            %li
              %a{href: "#nav_usage"} General Usage
            %li
              %a{href: "#nav_routes"} Routes
            %li
              %a{href: "#nav_batch"} Batch Services

        %div.col-sm-10

          %h1#nav_home API Documentation
          %h2#nav_usage General Usage
          %p
            This API provides a RESTful interface to the Stanford Digital Repository for
            authorized access.  The API specifies RESTful resources to access entire or partial
            digital object content, referenced by unique identifiers (DRUIDs).
            -#For more information, please read this documentation and view the
            -#%a{href: "https://github.com/ncbo/ncbo_rest_sample_code"} sample code.
            -#For additional help, please email
            -#%a{href: "mailto:support@bioontology.org", target: "_blank"} support@bioontology.org

          :markdown
            #### HTTP Verbs
            The API uses different verbs to support processing of resources. This includes things like creating or deleting
            individual resources. Typically, the verbs will be used in conjunction with the URL that represents the id for
            a given resource. Here is how we interpret the verbs:

            - <span class="label label-info">GET</span> Used to retrieve a resource or collection of resources
            ([GET](http://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-21#section-5.3.1)).

            - <span class="label label-info">POST</span> Used to create a resource when the server determines the resource's id
            ([POST](http://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-21#section-5.3.3)).

            - <span class="label label-info">PUT</span> Used to create or update the entire entity-body at the URL
            ([PUT](http://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-21#section-5.3.4)).

            - <span class="label label-info">PATCH</span> Used to partially update an existing resource. The attributes in a PATCH request will replace existing attributes
            ([PATCH](http://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-21#section-5.3.4)).

            - <span class="label label-info">DELETE</span> Used to delete an existing resource
            ([DELETE](http://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-21#section-5.3.5)).


          %h2#nav_routes Application Routes

          %h3#nav_sdr_routes SDR Services Routes
          = haml :routes, :locals => { :routes => Sdr::ServicesAPI.routes,
            :routeToYardDoc => request.path.sub('documentation','Sdr/ServicesAPI.html#') }

          %h3#nav_sdr_routes Archive Catalog Routes
          = haml :routes, :locals => {:routes => Sdr::ArchiveCatalogAPI.routes,
            :routeToYardDoc => request.path.sub('documentation','Sdr/ArchiveCatalogAPI.html#') }


          %h2#nav_batch Batch Archive Transfers

          %p
            These services provide transfers for MOAB archives of DRUIDs.  The REST service deployment system
            must be configured for ssh access and write permissions on the destination host and file system.

            %ul
              %li Transfer a single DRUID to a pre-configured destination
              %ul
                %li
                  <span class="label label-info">GET</span> <code>/objects/:druid/transfer</code>
                %li
                  example: /objects/druid:dh370hm3931/transfer


              %li Transfer many DRUIDs to a destination host:path, using one of several path types.  The transfer
              activity is asynchronous, completion is signaled via email notification to a configured recipient.
              %ul
                %li
                  <span class="label label-info">POST</span> <code>/objects/transfer?{params}</code>
                %li
                  Parameters
                  %ul
                    %li druids={druid_id1,druid_id2..,druid_idN}
                    %li destination_host={remote_user@remote_host}
                    %li destination_path={remote_absolute_path}
                    %li destination_type='druid_id' || 'druid-tree-short' || 'druid-tree-long'

              %li
                An example shell script, using curl to POST parameters to the SDR web service:
                :markdown
                  <pre style="display: table; padding-right: 10px;">
                    sdr_user='sdrAuthorizedUser'
                    sdr_pass='sdrAuthorizedPass'
                    sdr_host='sdrAppHost'
                    druids='druid:dh370hm3931,druid:hv987cf5327,druid:nh358jx9024,druid:sd695sp3501,druid:fq515xp0937'
                    destination_host='RemoteUser@RemoteHost'  # must be accessible from $sdr_host
                    destination_path='/tmp/sdr_transfers'     # created if it doesn't exist
                    destination_type='druid_id' # default || 'druid-tree-short' || 'druid-tree-long'
                    url="https://${sdr_user}:${sdr_pass}@${sdr_host}/sdr/objects/transfer?"
                    url="${url}druids=${druids}"
                    url="${url}&destination_host=${destination_host}"
                    url="${url}&destination_path=${destination_path}"
                    url="${url}&destination_type=${destination_type}"
                    curl -X POST $url
                  </pre>

              %li
                Script utility for transfer of many DRUIDs to a destination host:path, using one of several path types.
                The transfer activity is asynchronous, completion is signaled via email notification to a configured recipient.
                :markdown
                  <pre style="display: table; padding-right: 10px;">
                    $ ssh {sdr_user}@{sdr_services_host}
                    $ cd {sdr_application_path}/current
                    $ ./bin/druid_transfer.rb --help
                    Usage: ./bin/druid_transfer.rb [OPTIONS] [FILES]
                        -d, --druids                DRUID[,DRUID,...] - a list of DRUIDs (or use STDIN or FILES).
                        -h, --destination_host      DESTINATION_HOST - {user}@{host}
                                                    where ssh automated authorization is enabled for {user}@{host}
                        -p, --destination_path      DESTINATION_PATH - /absolute_path_to_remote/repository
                                                    where {user}@{host} has permission to create directories and files
                        -t, --destination_type      'druid-id'            (jq937jp0017) [default]
                                                    or 'druid-tree-short' (jq/937/jp/0017)
                                                    or 'druid-tree-long'  (jq/937/jp/0017/jq937jp0017)
                        -l, --logfile               FILE  - log to FILE (default='log/druid_transfers.log')
                            --help
                  </pre>





    :javascript
      // @prettify
      !function ($) {
        $(function(){
        window.prettyPrint && prettyPrint()
        })
      }(window.jQuery);
      // #prettify
